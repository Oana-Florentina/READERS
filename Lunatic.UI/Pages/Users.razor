@page "/users"
@using Lunatic.UI.Contracts
@using Lunatic.UI.ViewModels
@inject IUserDataService UserDataService
@inject IDataService DataService

<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="css/users.css">
    <title>Users and Friends</title>
</head>
<body>
    <div class="container">
        <h3>Users and Friends</h3>

        <input type="text" class="search-bar" placeholder="Search by username..." @bind="searchTerm" @bind:event="oninput" />

        <div class="columns">
            <div class="column">
                <h4>My Friends</h4>
                @if (FriendsList == null || !FriendsList.Any())
                {
                    <p><em>You have no friends added.</em></p>
                }
                else
                {
                    <table class="styled-table">
                        <thead>
                            <tr>
                                <th>Username</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var friend in FriendsList)
                            {
                                <tr>
                                    <td>@friend.Username</td>
                                    <td>
                                        <button class="btn btn-secondary" @onclick="() => RemoveFriend(friend.UserId)">Remove</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
            <div class="column">
                <h4>Find New Friends</h4>
                @if (FilteredUsers == null)
                {
                    <p><em>Loading...</em></p>
                }
                else if (!FilteredUsers.Any())
                {
                    <p>No users found.</p>
                }
                else
                {
                    <table class="styled-table">
                        <thead>
                            <tr>
                                <th>Username</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in FilteredUsers)
                            {
                                <tr>
                                    <td>@user.Username</td>
                                    <td>
                                        @if (FriendsList.Any(f => f.UserId == user.UserId))
                                        {
                                            <button class="btn btn-secondary" disabled>Already Friends</button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-primary" @onclick="() => SendFriendRequest(user.UserId)">Add Friend</button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</body>


@code {
    private string searchTerm = string.Empty;
    private List<UserViewModel> UsersList = new();
    private List<UserViewModel> FriendsList = new();
    private List<UserViewModel> FilteredUsers =>
        string.IsNullOrEmpty(searchTerm)
            ? UsersList.Where(u => u.UserId != CurrentUserId).ToList()
            : UsersList.Where(u => u.UserId != CurrentUserId && u.Username.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    private Guid CurrentUserId;

    protected override async Task OnInitializedAsync()
    {
        CurrentUserId = await DataService.GetItemAsync<Guid>("UserId");
        UsersList = (await UserDataService.GetUsersAsync()).ToList();
        FriendsList = (await UserDataService.GetFriendsByUserIdAsync(CurrentUserId)).ToList();
    }

    private async Task SendFriendRequest(Guid receiverId)
    {
        var response = await UserDataService.SendFriendRequestAsync(CurrentUserId, receiverId);
        if (response.Success)
        {
            Console.WriteLine("Friend request sent successfully.");
        }
        else
        {
            Console.WriteLine("Failed to send friend request.");
        }
    }

    private async Task RemoveFriend(Guid friendId)
    {
       /* var response = await UserDataService.RemoveFriendAsync(CurrentUserId, friendId);
        if (response.Success)
        {
            FriendsList.RemoveAll(f => f.UserId == friendId);
            StateHasChanged();
            Console.WriteLine("Friend removed successfully.");
        }
        else
        {
            Console.WriteLine("Failed to remove friend.");
        }*/
    }
}
