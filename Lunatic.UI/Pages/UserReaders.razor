@page "/userReaders"
@using Lunatic.UI.Contracts
@using Lunatic.UI.ViewModels
@using Lunatic.UI.Payload;
@inject ITokenService tokenService
@inject IUserDataService UserDataService
@inject NavigationManager NavigationManager
@inject IReaderDataService ReaderDataService
@inject IRatingDataService RatingDataService
@inject IBookDataService BookDataService

<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="css\books.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <title>Books I Have Read</title>
</head>

<h3>Books I Have Read</h3>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (!Books.Any())
{
    <p>No read books to display.</p>
}
else
{
    <div class="books-container">
        @foreach (var book in Books)
        {
            <div class="book-card">
                <img src="@book.Cover" alt="Book cover">
                <div class="book-details">
                    <h5>@book.Title</h5>
                    <p><strong>Author:</strong> @book.Author</p>
                    <p><strong>Year:</strong> @book.Year</p>
                    <p><strong>Genres:</strong> @if (book.Genres != null && book.Genres.Any())
                        {
                            @string.Join(", ", book.Genres)
                        }
                        else
                        {
                            <span>No genres available</span>
                        } </p>
                </div>
                <div class="card-footer">
                    <button class="btn btn-primary btn-sm" @onclick="() => ShowDetails(book.BookId)">Details</button>
                    <button class="btn btn-outline-primary btn-sm" @onclick="() => ToggleFavorite(book)">
                        <i class="@GetHeartClass(book.IsFavorite)"></i>
                    </button>

                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public Guid userId { get; set; }

    
    [Inject]
    public IDataService dataService { get; set; }

    public List<BookViewModel> Books { get; set; } = new();
    private bool isLoading { get; set; } = false;
    private bool IsModalVisible { get; set; } = false;
    private ReaderDto SelectedReader { get; set; }
    private RatingViewModel? SelectedRating { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        isLoading = true;
        try
        {
            Books.Clear();
            var userId = await dataService.GetItemAsync<Guid>("UserId");
            var readers = await UserDataService.GetBooksIReadByIdsAsync(userId);

            foreach (var reader in readers)
            {
                var book = await BookDataService.GetBookByIdAsync(reader.BookId);
                if (book != null)
                {
                    book.IsFavorite = await UserDataService.IsBookFavorite(userId, book.BookId); 
                    Books.Add(book);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading read books: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ShowDetails(Guid bookId)
    {
        var userId = await dataService.GetItemAsync<Guid>("UserId");
        var readers = await ReaderDataService.GetReaderByBookIdAndUserIdAsync(bookId, userId);
        Console.WriteLine($"{readers.Reader.ReaderId}");
        SelectedReader = readers.Reader;
        if (readers != null)
        {

            Console.WriteLine($"StartDate: {SelectedReader.StartDate}");
            IsModalVisible = true;
        }
    }
    private async Task AddToFavorites(Guid bookId)
    {
        try
        {
            var userId = await dataService.GetItemAsync<Guid>("UserId");
            Console.WriteLine($"UserId: {userId}");
            Console.WriteLine($"BookId: {bookId}");

            var addWantToFavoritesResponse = await UserDataService.AddToFavoritesAsync(userId, bookId);
            if (addWantToFavoritesResponse.Success)
            {
            }
            else
            {
                if (addWantToFavoritesResponse.ValidationErrors != null)
                {
                    foreach (var error in addWantToFavoritesResponse.ValidationErrors)
                    {
                        Console.WriteLine($"Validation Error: {error}");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding book to Want to Read list: {ex.Message}");
            // Handle error (e.g., show a message to the user)
        }
    }

    private void CloseModal()
    {
        IsModalVisible = false;
    }

    private void NavigateToBook(Guid bookId)
    {
        NavigationManager.NavigateTo($"/book/{bookId}");
    }

    private string GetHeartClass(bool isFavorite)
    {
        return isFavorite ? "fas fa-heart text-danger" : "far fa-heart";
    }

    private async Task ToggleFavorite(BookViewModel book)
    {
        if (book.IsFavorite)
        {
            // Call API to remove from favorites
            book.IsFavorite = false; // Assuming API call succeeds
        }
        else
        {
            var response = await UserDataService.AddToFavoritesAsync(userId, book.BookId);
            if (response.Success)
            {
                book.IsFavorite = true; // Update the local state to reflect the change
            }
            else
            {
                Console.WriteLine("Failed to add to favorites");
                // Handle failures (e.g., show an error message)
            }
        }

        StateHasChanged(); // This tells Blazor to re-render the component
    }


}