@page "/"
@using Lunatic.UI.Contracts
@using Microsoft.AspNetCore.Components.Authorization
@using Lunatic.UI.ViewModels
@inject ITokenService TokenService

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<br />
<CascadingAuthenticationState>
    <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
        <Authorized>
            <div>
                <h3>Friend Requests</h3>
                @if (isLoading)
                {
                    <p><em>Loading...</em></p>
                }
                else if (FriendRequests == null || !FriendRequests.Any())
                {
                    <p>No friend requests.</p>
                }
                else
                {
                    <div class="notification-box">
                        @foreach (var sender in FriendRequests)
                        {
                            <div class="notification-item">
                                <p><strong>@sender.SenderId</strong> wants to be your friend!</p>
                                <button class="btn btn-primary" @onclick="() => AcceptFriendRequest(sender.SenderId)">Accept</button>
                                <button class="btn btn-secondary" @onclick="() => DeclineFriendRequest(sender.SenderId)">Decline</button>
                            </div>
                        }
                    </div>
                }
            </div>
        </Authorized>
        <NotAuthorized>
            <button class="btn btn-lg btn-primary btn-block" @onclick="NavigateToLogin">Click here to log in</button>
            <br />
            <button class="btn btn-lg btn-primary btn-block" @onclick="NavigateToRegister">Click here to register</button>
        </NotAuthorized>
    </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
</CascadingAuthenticationState>

@code {
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    public IAuthenticationService AuthenticationService { get; set; }
    [Inject]
    public IUserDataService UserDataService { get; set; }
    [Inject]
    public IDataService dataService { get; set; }

    private List<UserViewModel> FriendRequestSenders { get; set; } = new();

    public List<FriendRequestViewModel> FriendRequests { get; set;} = new();

    private bool isLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await TokenService.GetTokenAsync();
            Console.WriteLine($"Token: {token}");
            if (string.IsNullOrEmpty(token))  // More explicit check for both null and empty strings
            {
                Console.WriteLine("No token found, navigating to login.");
                NavigationManager.NavigateTo("/login", forceLoad: true);  // forceLoad ensures a full page reload if needed
                return;  // Important to return to avoid executing further code
            }

            // If token exists, proceed to load user-specific data
            var userId = await dataService.GetItemAsync<Guid>("UserId");
            if (userId == Guid.Empty)
            {
                Console.WriteLine("No UserId found, additional handling could be here.");
            }

            FriendRequests = (await UserDataService.GetFriendRequestsByUserIdAsync(userId)).ToList();
            Console.WriteLine($"FriendRequests: {FriendRequests.Count}");
            await LoadFriendRequests();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during initialization: {ex.Message}");
            // Optional: Navigate to an error page or display an error message
        }
    }


    private async Task LoadFriendRequests()
    {
        isLoading = true;
        try
        {
            var userId = await dataService.GetItemAsync<Guid>("UserId");
            FriendRequests= (await UserDataService.GetFriendRequestsByUserIdAsync(userId)).ToList();
            Console.WriteLine($"FriendRequests: {FriendRequests.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading friend requests: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/register");
    }

    private async Task AcceptFriendRequest(Guid senderId)
    {
        // Implement the logic to accept the friend request
    }

    private async Task DeclineFriendRequest(Guid senderId)
    {
        // Implement the logic to decline the friend request
    }
}
