@page "/"
@using Lunatic.UI.Contracts
@using Microsoft.AspNetCore.Components.Authorization
@using Lunatic.UI.ViewModels
@inject ITokenService TokenService
@inject NavigationManager NavigationManager
@inject IUserDataService UserDataService
@inject IDataService DataService
@inject IBookDataService BookDataService
<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="css\home.css">
     <link rel="stylesheet" href="css\books.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" integrity="sha384-SZXxX4whJ79/gErwcOYf+zWLeJdY/qpuqC4cAa9rOGUstPomtqpuNWT9wdPEn2fk" crossorigin="anonymous">


   </head>
<PageTitle>Home</PageTitle>
<body>
<div class="home-page">
        <div class="header">
            <div class="welcome-text">
                <h2>Welcome to Readers!</h2>
            </div>
        </div>


    <div class="notifications-section">
            <button class="notifications-button" @onclick="ToggleFriendRequests">
                <i class="fas fa-bell"></i> (@TotalNotifications)
            </button>
        <div class="friend-requests" style="display: @(showFriendRequests ? "block" : "none")">
            @if (isLoading)
            {
                <p><em>Loading...</em></p>
            }
            else if (!FriendRequests.Any() && !FriendRecommandations.Any())
            {
                <p>No notifications.</p>
            }
            else
            {
                <div class="friend-requests-list">
                    @foreach (var request in FriendRequests)
                    {
                            <div class="friend-request-item">
                                <p><strong>@FriendRequestSenders[request.SenderId]</strong> wants to be your friend!</p>
                                <div class="button-container">
                                    <button class="btn btn-primary" @onclick="() => AcceptFriendRequest(request.FriendRequestId)">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button class="btn btn-secondary" @onclick="() => DeclineFriendRequest(request.FriendRequestId)">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                    }
                            @foreach (var request in FriendRecommandations)
                            {
                                <div class="friend-request-item">
                                    <p><strong>@FriendRecommandationSenders[request.SenderId]</strong> has recommended you a book!</p>
                                <p>
                                    <NavLink href="@($"/book/{request.BookId}")">@RecommendedBookTitles[request.FriendRecommandationId]</NavLink>
                                </p>
                                <button class="btn btn-secondary">
                                    <i class="fas fa-times"></i> 
                                </button>
                            </div>
                    }
                </div>
            }
        </div>
    </div>

    <div class="quote-section">
        <div class="quote-container">
                <blockquote>"A reader lives a thousand lives before he dies. The man who never reads lives only one." - George R.R. Martin</blockquote>
        </div>
    </div>
        <div class="book-sections-container">
            <div class="for-you-section">
                <h2>For You</h2>
                <div class="books-container">
                    @if (RecommendedBooks == null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else if (!RecommendedBooks.Any())
                    {
                        <p>No books available.</p>
                    }
                    else
                    {
                        <div class="books-container">
                            @foreach (var book in RecommendedBooks.Take(3))
                            {
                                <div class="book-card">
                                    <img src="@book.Cover" alt="Book cover">
                                    <div class="book-details">
                                        <h5>@book.Title</h5>
                                        <p><strong>Author:</strong> @book.Author</p>
                                    </div>
                                    <div class="card-footer">
                                        <button class="btn btn-primary btn-sm" @onclick="() => NavigateToBook(book.BookId)">
                                            <i class="fas fa-info-circle"></i>
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <div class="for-you-section">
                <h2>Popular Now</h2>
                <div class="books-container">
                    @if (PopularBooks == null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else if (!PopularBooks.Any() || PopularBooks.Count < 3)
                    {
                        <p>No books available.</p>
                    }
                    else
                    {
                        <div class="books-container">
                            @foreach (var book in PopularBooks.Take(3))
                            {
                                <div class="book-card">
                                    <img src="@book.Cover" alt="Book cover">
                                    <div class="book-details">
                                        <h5>@book.Title</h5>
                                        <p><strong>Author:</strong> @book.Author</p>
                                    </div>
                                    <div class="card-footer">
                                        <button class="btn btn-primary btn-sm" @onclick="() => NavigateToBook(book.BookId)">
                                            <i class="fas fa-info-circle"></i>
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
</div>
</body>
@code {
    private bool showFriendRequests = false;
    private bool isLoading = false;
    private DateTime currentDate = DateTime.Now;
    private List<BookViewModel> RecommendedBooks { get; set; } = new();
    private Dictionary<Guid, string> FriendRequestSenders { get; set; } = new();
    private List<FriendRequestViewModel> FriendRequests { get; set; } = new();
    private List<FriendRecommandationViewModel> FriendRecommandations { get; set; } = new();
    private Dictionary<Guid, string> FriendRecommandationSenders { get; set; } = new();
    private Dictionary<Guid, string> RecommendedBookTitles { get; set; } = new();
    private int TotalNotifications { get; set; } = 0;

    public List<BookViewModel> PopularBooks { get; set; } = new();
    public List<BookViewModel> Books { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var userId = await DataService.GetItemAsync<Guid>("UserId");
            var token = await TokenService.GetTokenAsync();

            if (string.IsNullOrEmpty(token) || userId == Guid.Empty)
            {
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            FriendRequests = (await UserDataService.GetFriendRequestsByUserIdAsync(userId)).ToList();
            FriendRecommandations = await UserDataService.GetFriendRecommandationByUserIdAsync(userId);
            TotalNotifications = FriendRequests.Count + FriendRecommandations.Count;
            RecommendedBooks = await UserDataService.RecommendBooksAsync(userId);
            PopularBooks = await BookDataService.GetPopularBooksAsync();
            

            foreach (var request in FriendRequests)
            {
                var senderProfile = await UserDataService.GetUserByIdAsync(request.SenderId);
                if (senderProfile != null)
                {
                    FriendRequestSenders[request.SenderId] = senderProfile.Username;
                }
            }


            foreach (var request in FriendRecommandations)
            {
                var senderProfile = await UserDataService.GetUserByIdAsync(request.SenderId);
                if (senderProfile != null)
                {
                    FriendRecommandationSenders[request.SenderId] = senderProfile.Username;

                }
                var book = await BookDataService.GetBookByIdAsync(request.BookId);
                if (book != null)
                {
                    RecommendedBookTitles[request.FriendRecommandationId] = book.Title;
                }
            }


          
           
            Books = (await BookDataService.GetBooksAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleFriendRequests()
    {
        showFriendRequests = !showFriendRequests;
    }

    private async Task AcceptFriendRequest(Guid requestId)
    {
        var response = await UserDataService.DeleteFriendRequestAsync(requestId, true);
        if (response.Success)
        {
            FriendRequests.RemoveAll(r => r.FriendRequestId == requestId);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Failed to accept friend request: " + response.Message);
        }
    }

    private async Task DeclineFriendRequest(Guid requestId)
    {
        var response = await UserDataService.DeleteFriendRequestAsync(requestId, false);
        if (response.Success)
        {
            FriendRequests.RemoveAll(r => r.FriendRequestId == requestId);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Failed to decline friend request: " + response.Message);
        }
    }
    private void NavigateToBook(Guid bookId)
    {
        NavigationManager.NavigateTo($"/book/{bookId}");
    }
   
}
