@page "/allBooks"
@using Lunatic.UI.Contracts
@using Lunatic.UI.ViewModels
@inject IBookDataService BookDataService
@inject NavigationManager NavigationManager

<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="css\books.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <title>Books</title>
</head>
<body></body>
<h3>All Books</h3>

<!-- Search Bar -->
<input type="text" placeholder="Search by title, author, year, or genre..." @bind="searchTerm" @bind:event="oninput" class="search-bar" />

<body>

@if (FilteredBooks == null)
{
    <p><em>Loading...</em></p>
}
else if (!FilteredBooks.Any())
{
    <p>No books found.</p>
}
else
{
    <div class="books-container">
        @foreach (var book in FilteredBooks)
        {
            <div class="book-card">
                <img src="@book.Cover" alt="Book cover">
                <div class="book-details">
                    <h5>@book.Title</h5>
                    <p><strong>Author:</strong> @book.Author</p>
                </div>
                <div class="card-footer">
                        <button class="btn btn-primary btn-sm" @onclick="() => NavigateToBook(book.BookId)">
                            <i class="fas fa-info-circle"></i>
                        </button>
                </div>
            </div>
        }
    </div>
}
</body>
@code {
    public List<BookViewModel>? Books { get; set; } = new List<BookViewModel>();

    private string searchTerm = string.Empty;

    // FilteredBooks is the list of books after applying the search filter
    private List<BookViewModel> FilteredBooks => string.IsNullOrEmpty(searchTerm)
        ? Books!
        : Books!.Where(b =>
            (b.Title?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (b.Author?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (b.Year.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (b.AverageScore.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (b.Genres != null && b.Genres.Any(genre => genre.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
        ).ToList();

    protected override async Task OnInitializedAsync()
    {
        Books = (await BookDataService.GetBooksAsync()).ToList();
    }

    private void NavigateToBook(Guid bookId)
    {
        NavigationManager.NavigateTo($"/book/{bookId}");
    }
}
