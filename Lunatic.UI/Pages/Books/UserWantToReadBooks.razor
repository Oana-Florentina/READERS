@page "/userWantToReadBooks"
@using Lunatic.UI.Contracts
@using Lunatic.UI.ViewModels
@inject ITokenService tokenService
@inject IUserDataService UserDataService
@inject NavigationManager NavigationManager
@inject IReaderDataService ReaderDataService
@inject IRatingDataService RatingDataService
<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="css\books.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <title>Books I Want To Read</title>
</head>
<h3>Books I Want to Read</h3>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (!Books.Any())
{
    <p>No books in your 'Want to Read' list.</p>
}
else
{
    <div class="books-container">
        @foreach (var book in Books)
        {
            <div class="book-card">
                <img src="@book.Cover" alt="Book cover">
                <div class="book-details">
                    <h5>@book.Title</h5>
                    <p><strong>Author:</strong> @book.Author</p>
                    <p><strong>Year:</strong> @book.Year</p>
                    <p><strong>Genres:</strong> @if (book.Genres != null && book.Genres.Any())
                        {
                            @string.Join(", ", book.Genres)
                        }
                        else
                        {
                            <span>No genres available</span>
                        } </p>
                </div>
                <div class="card-footer">
                    <button class="btn btn-primary btn-sm" @onclick="() => NavigateToBook(book.BookId)">
                        View Details
                    </button>
                </div>
            </div>
        }
    </div>
}

@code {
    [Inject]
    public IDataService dataService { get; set; }
    public List<BookViewModel> Books { get; set; } = new();
    private bool isLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            Books.Clear();
            var userId = await dataService.GetItemAsync<Guid>("UserId");
            Books = (await UserDataService.GetBooksIWantToReadByIdsAsync(userId)).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading books: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToBook(Guid bookId)
    {
        NavigationManager.NavigateTo($"/book/{bookId}");
    }
}
