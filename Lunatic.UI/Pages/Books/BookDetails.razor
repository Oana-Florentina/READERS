@page "/book/{bookId:guid}"
@using Lunatic.UI.Contracts
@using Lunatic.UI.ViewModels
@inject IBookDataService BookDataService
@inject NavigationManager NavigationManager
@inject IUserDataService UserDataService
@inject IReaderDataService ReaderDataService
@inject IRatingDataService RatingDataService

<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="css/bookDetails.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <title>Book details</title>
</head>

<h3>Book Details</h3>

@if (Book == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="book-details">
        <img src="@Book.Cover" alt="Book cover" class="book-cover">
        <h4>@Book.Title</h4>
        <p><strong>Author:</strong> @Book.Author</p>
        <p><strong>Year:</strong> @Book.Year</p>
        <p><strong>Description:</strong> @Book.Description</p>
        <p><strong>Average Score:</strong> @Book.AverageScore</p>
        <p><strong>Genres:</strong> @Book.Genres</p>

        

        <!-- Action Buttons -->
        <button class="btn btn-success" @onclick="AddToWantToRead">Add to Want to Read</button>
        <button class="btn btn-primary" @onclick="OpenReadBooksModal">Add to Read Books</button>
    </div>
}

<!-- Modal for Adding to Read Books -->
@if (IsModalVisible)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add to Read Books</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="startDate" class="form-label">Start Date</label>
                        <input type="date" id="startDate" class="form-control" @bind="StartDate">
                    </div>
                    <div class="mb-3">
                        <label for="endDate" class="form-label">End Date</label>
                        <input type="date" id="endDate" class="form-control" @bind="EndDate">
                    </div>
                    
                    <div class="mb-3">
                        <label for="score" class="form-label">Rating Score (optional)</label>
                        <input type="number" id="score" class="form-control" @bind="Score" min="0" max="5" step="0.1">
                    </div>
                    <div class="mb-3">
                        <label for="commentMessage" class="form-label">Comment (optional)</label>
                        <textarea id="commentMessage" class="form-control" @bind="CommentMessage"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="AddToReadBooks">Save changes</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid bookId { get; set; }

    public BookViewModel? Book { get; set; }
    public FriendRequestViewModel FriendRequest { get; set; }

    [Inject]
    public IDataService dataService { get; set; }

    // Modal related properties
    private bool IsModalVisible { get; set; }
    private DateTime StartDate { get; set; } = DateTime.Now;
    private DateTime EndDate { get; set; } = DateTime.Now;
    private bool IsFavorite { get; set; }
    private float Score { get; set; } = 0; // Default value for score
    private string CommentMessage { get; set; } = string.Empty; // Default value for comment

    protected override async Task OnInitializedAsync()
    {
        
        if (bookId != Guid.Empty)
        {
            Book = await BookDataService.GetBookByIdAsync(bookId);
            Console.WriteLine($"BookId: {bookId}");
        Console.WriteLine($"cover: {Book?.Cover}");
        Console.WriteLine($"Title: {Book?.Title}");
        Console.WriteLine($"{Book}");
            Console.WriteLine($"Book: {Book?.Title}");
            Console.WriteLine($"Book: {Book?.Genres}");
            if (Book == null)
            {
                NavigationManager.NavigateTo("/404");
            }
        }
        else
        {
            NavigationManager.NavigateTo("/404");
        }
    }

    private void OpenReadBooksModal()
    {
        IsModalVisible = true;
    }

    private void CloseModal()
    {
        IsModalVisible = false;
    }

    private async Task AddToWantToRead()
    {
        try
        {
            var userId = await dataService.GetItemAsync<Guid>("UserId");

            var addWantToReadResponse = await UserDataService.AddWantToReadAsync(userId, bookId);
            if (addWantToReadResponse.Success)
            {
                Console.WriteLine($"Book {Book?.Title} added to Want to Read list successfully.");
            }
            else
            {
                Console.WriteLine($"Failed to add book {Book?.Title} to Want to Read list.");
                if (addWantToReadResponse.ValidationErrors != null)
                {
                    foreach (var error in addWantToReadResponse.ValidationErrors)
                    {
                        Console.WriteLine($"Validation Error: {error}");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding book to Want to Read list: {ex.Message}");
            // Handle error (e.g., show a message to the user)
        }
    }

    private async Task AddToReadBooks()
    {
        try
        {
            Guid ratingId = Guid.Empty;
            var userId = await dataService.GetItemAsync<Guid>("UserId");

            // Create a rating if score or comment are provided
            if (Score > 0 || !string.IsNullOrWhiteSpace(CommentMessage))
            {
                var rating = new RatingViewModel
                    {
                        RatingId = Guid.NewGuid(),
                        BookId = bookId,
                        UserId = userId,
                        Score = Score,
                        CommentMessage = CommentMessage
                    };
                Console.WriteLine($"Rating: {rating.Score}");
                var createdRatingResponse = await RatingDataService.AddRatingAsync(rating);

                if (createdRatingResponse.Success)
                {
                    Console.WriteLine("Rating added successfully.");
                    var createdRating = createdRatingResponse.Rating;
                    ratingId = createdRating.RatingId;
                }
                else
                {
                    Console.WriteLine("Failed to add rating.");
                }
            }

            // Create the reader with the provided details
            var reader = new ReaderViewModel
                {
                    ReaderId = Guid.NewGuid(),
                    BookId = bookId,
                    UserId = userId,
                    StartDate = StartDate.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
                    EndDate = EndDate.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
                    RatingId = ratingId,
                    IsFavorite = IsFavorite
                };

            var addedReader = await ReaderDataService.AddReaderAsync(reader);
            if(addedReader.Success)
            {  
                var addReaderToUser = await UserDataService.AddReaderToUserAsync(userId, addedReader.Reader.ReaderId);
                Console.WriteLine($"Reader added to user: {addReaderToUser.Success}");
            }

            CloseModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding book to read list: {ex.Message}");
            // Handle error (e.g., show a message to the user)
        }
    }
}
