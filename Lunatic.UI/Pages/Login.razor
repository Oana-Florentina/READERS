@page "/login"
@using Lunatic.UI.Auth
@using Lunatic.UI.ViewModels
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider

<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="css\login.css">
    <title>Login</title>
</head>
<body>
    <div class="login__card">
        <div class="login__intro">
            <h2>Welcome Back!</h2>
            <h4>Enter Your Details to Continue</h4>
        </div>
        <div class="login__form">
            <h1 class="login__heading">Sign In to Access Your Account</h1>
            <EditForm OnValidSubmit="OnSubmit" Model="loginRequest">
                <DataAnnotationsValidator />
                <p>
                    <InputText class="input email" placeholder="Username" @bind-Value="loginRequest.Username" autofocus />
                    <ValidationMessage For="@(() => loginRequest.Username)" />
                </p>
                <p>
                    <InputText type="password" class="input password" placeholder="Password" @bind-Value="loginRequest.Password" />
                    <ValidationMessage For="@(() => loginRequest.Password)" />
                </p>
                <p>
                    <button class="input submit" type="submit">Sign Me In</button>
                </p>
                <label class="text-danger">@error</label>
            </EditForm>
            <div class="login__helper">
                <span class="forget__password">
                    Forget Your Password? <a href="#">Reset Now</a>
                </span>
                <span class="create__account">
                    Don't Have an Account? <NavLink href="register">Sign Up</NavLink>
                </span>
            </div>
        </div>
    </div>
</body>

@code {
    LoginViewModel loginRequest { get; set; } = new LoginViewModel();
    string error { get; set; }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            await authStateProvider.Login(loginRequest);
            navigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}
